import React, { useState } from "react";
import { FormFloatingSelect } from "./FloatingLabel";
import DeleteButton from "./deleteButton";
import AddZoneButton from "./addZoneButton";
import { zones } from "../data/zones";
import { zonesWithSides } from "../data/zonesWithSides";
import { sides } from "../data/sides";
import { ogkViews } from "../data/ogkViews";
import { plechKulshSuglobViews } from "../data/plechovuyKulshovuySuglobViews";
import Button from "react-bootstrap/Button";
import { useDispatch, useSelector } from "react-redux";
import {
  editZone,
  editProaction,
  editSide,
  editNorma,
  resetZoneInfoSliseReducer,
  applyPatientInfoBlock,
  resetZoneInfoSliseReducerExceptZone,
} from "./redux/slices/zoneInfoSliseReducer";
import {
  resetLegenRusynokArray,
  resetKoreniArray,
  resetSynusyArray,
  resetKupalaDiadragmyArray,
  resetCorArray,
  resetOgkZakliuchenniaArray,
  resetogkSliseReducer,
} from "./redux/slices/ogkSliseReducer";

import { resetCherepSliseReducer } from "./redux/slices/cherepSliseReducer";
import { resetPpnSliseReducer } from "./redux/slices/ppnSliseReducer";
import { resetUniversalSliceReducer } from "./redux/slices/universalSliceReducer";
import {
  resetZone,
  resetSide,
  resetProaction,
  resetNorma,
} from "./redux/slices/zoneInfoSliseReducer";

import {
  addDocText,
  doubleAddPatientAndZoneDocText,
} from "./redux/slices/documentSliseReducer";

import { renderToString } from "react-dom/server";
import { ZoneInfoPattern } from "../patternsText/zoneInfoPattern";

import { Ogk } from "./Ogk";
import { Cherep } from "./Cherep";
import { Ppn } from "./Ppn";
import { Shvh } from "./Shvh";
import { Gvh } from "./Gvh";
import { Pvh } from "./Pvh";
import { Ochp } from "./Ochp";
import { PlechovyiSuhlob } from "./PlechovyiSuhlob";
import { Kliuchytsia } from "./Kliuchytsia";
import { Rebra } from "./Rebra";
import { LiktovyiSuhlob } from "./LiktovyiSuhlob";
import { PromenevoZapIastkovyiSuhlob } from "./PromenevoZapIastkovyiSuhlob";
import { Kyst } from "./Kyst";
import { KistokTazu } from "./KistokTazu";
import { KulshovyiSuhlob } from "./KulshovyiSuhlob";
import { KolinnyiSuhlob } from "./KolinnyiSuhlob";
import { HomilkovoStopnyiSuhlob } from "./HomilkovoStopnyiSuhlob";
import { Stopa } from "./Stopa";
import { PeredniViddilyStopy } from "./PeredniViddilyStopy";
import { PacientInfoPattern } from "../patternsText/pacientInfoPattern";
import {
  editExamNumber,
  resetPacientInfoSliseReducer,
} from "./redux/slices/pacientInfoSliseReducer";
import { initialPatientName } from "../data/initialPatientName";
import { initialPatientBirthYear } from "../data/initialPatientBirthYear";
import { initialExamNumber } from "../data/initialExamNumber";
import { AddZoneDescriptionOnlyButton } from "./AddZoneDescriptionOnlyButton";
import { resetDescriptionOnly } from "./redux/slices/newZoneSlise";

export const ImagineOptions = ({ id, editorContent }) => {

  const [selectedZone, setSelectedZone] = useState("–û–ì–ö");

  const [selectedSide, setSelectedSide] = useState("–°–ø—Ä–∞–≤–∞");
  const [selectedOgkViews, setSelectedOgkViews] = useState("–û–≥–ª—è–¥–æ–≤–∞");
  const [selectedplechKulshSuglobViews, setSelectedplechKulshSuglobViews] =
    useState("–ü—Ä—è–º–∞");
  const [selectednormaNenorma, setSelectednormaNenorma] = useState("–ù–æ—Ä–º–∞");
  const [addintoEditorButtonDisabled, setAddintoEditorButtonDisabled] =
    useState(false);
  const [descriptionOnlyButtonDisabled, setDescriptionOnlyButtonDisabled] =
    useState(true);

  // –í—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  // useEffect(()=>{
  //   dispatch(editZone("–û–ì–ö"));
  // }, [])

  const zoneWithSides = zonesWithSides.includes(selectedZone) ? true : false;

  const dispatch = useDispatch();
  // const state = useSelector((state) => state.creatingDocument.documentText);

  const textToDocPacientInfo = renderToString(PacientInfoPattern());
  const textToDoc = renderToString(ZoneInfoPattern());
  const existPatientName = useSelector((state) => state.pacientInfo.examName);
  const existPatientBirthYear = useSelector(
    (state) => state.pacientInfo.examBirthYear
  );

  const isPatientInfoExist =
    (existPatientName !== initialPatientName) &
    (existPatientBirthYear !== initialPatientBirthYear);
  const examState = useSelector((state) => state.pacientInfo.examNumber);

  const [acceptNotice, setAcceptNotice] = useState(null);

  const handleApplyZone = () => {
    editorContent();
    //–î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä

    // dispatch(addDocText({ textToDocPacientInfo }));
    // dispatch(addDocText({ textToDoc }));

    //–¥—É–±–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ PacientInfo + –¥–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É –≤ —ç–¥–∏—Ç–æ—Ä
    if (isPatientInfoExist !== 0) {
      dispatch(
        doubleAddPatientAndZoneDocText({ textToDocPacientInfo, textToDoc })
      );
      dispatch(resetPacientInfoSliseReducer());
      dispatch(applyPatientInfoBlock(true));

      if (examState !== initialExamNumber) {
        dispatch(editExamNumber(+examState + 1));
      }
    } else {
      dispatch(addDocText({ textToDoc }));
    }

    // dispatch(doubleAddPatientAndZoneDocText({ textToDocPacientInfo, textToDoc}));
    //  console.log('isPatientInfoExist', isPatientInfoExist);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–¥—é—Å–µ—Ä–∞—Ö
    dispatch(resetPacientInfoSliseReducer());
    // dispatch(resetZoneInfoSliseReducer()); //—Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    dispatch(resetZoneInfoSliseReducerExceptZone()); //—Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–æ–º–µ zone
    dispatch(resetogkSliseReducer());

    dispatch(resetCherepSliseReducer());
    dispatch(resetPpnSliseReducer());
    dispatch(resetUniversalSliceReducer());

    setAcceptNotice(<div className="overlay"></div>);
    setAddintoEditorButtonDisabled(true);
    // setDescriptionOnlyButtonDisabled(disabled)
  };

  return (
    // <div className="mb-4 p-3 rounded-3 text-dark border border-light-subtle bg-glass">
    <div className="mb-4 p-3 rounded-3 text-dark border border-light-subtle bg-2ndglass">
      <div className="imagineOptions">
        {acceptNotice}

        <FormFloatingSelect
          id="zone"
          items={zones}
          onZoneSelect={setSelectedZone}
          label="–ó–æ–Ω–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"
        />
        {zoneWithSides ? (
          <FormFloatingSelect
            items={sides}
            onZoneSelect={setSelectedSide}
            label="–°—Ç–æ—Ä–æ–Ω–∞"
          />
        ) : null}
        {selectedZone === "–û–ì–ö" ? <Ogk /> : null}
        {selectedZone === "–ß–µ—Ä–µ–ø" ? <Cherep /> : null}
        {selectedZone === "–ü–ü–ù" ? <Ppn /> : null}
        {selectedZone === "–®–í–•" ? <Shvh /> : null}
        {selectedZone === "–ì–í–•" ? <Gvh /> : null}
        {selectedZone === "–ü–í–•" ? <Pvh /> : null}
        {selectedZone === "–û–ß–ü" ? <Ochp /> : null}
        {selectedZone === "–ü–ª–µ—á–æ–≤–∏–π —Å—É–≥–ª–æ–±" ? <PlechovyiSuhlob /> : null}
        {selectedZone === "–ö–ª—é—á–∏—Ü—è" ? <Kliuchytsia /> : null}
        {selectedZone === "–†–µ–±—Ä–∞" ? <Rebra /> : null}
        {selectedZone === "–õ—ñ–∫—Ç—å–æ–≤–∏–π —Å—É–≥–ª–æ–±" ? <LiktovyiSuhlob /> : null}
        {selectedZone === "–ü—Ä–æ–º–µ–Ω–µ–≤–æ-–∑–∞–ø'—è—Å—Ç–∫–æ–≤–∏–π —Å—É–≥–ª–æ–±" ? (
          <PromenevoZapIastkovyiSuhlob />
        ) : null}
        {selectedZone === "–ö–∏—Å—Ç—å" ? <Kyst /> : null}
        {selectedZone === "–ö—ñ—Å—Ç–æ–∫ —Ç–∞–∑—É" ? <KistokTazu /> : null}
        {selectedZone === "–ö—É–ª—å—à–æ–≤–∏–π —Å—É–≥–ª–æ–±" ? <KulshovyiSuhlob /> : null}
        {selectedZone === "–ö–æ–ª—ñ–Ω–Ω–∏–π —Å—É–≥–ª–æ–±" ? <KolinnyiSuhlob /> : null}
        {selectedZone === "–ì–æ–º—ñ–ª–∫–æ–≤–æ—Å—Ç–æ–ø–Ω–∏–π —Å—É–≥–ª–æ–±" ? (
          <HomilkovoStopnyiSuhlob />
        ) : null}
        {selectedZone === "–°—Ç–æ–ø–∞" ? <Stopa /> : null}
        {selectedZone === "–ü–µ—Ä–µ–¥–Ω—ñ –≤—ñ–¥–¥—ñ–ª–∏ —Å—Ç–æ–ø–∏" ? (
          <PeredniViddilyStopy />
        ) : null}

        {selectedZone === "–ö—É–ª—å—à–æ–≤–∏–π —Å—É–≥–ª–æ–±" ||
        selectedZone === "–ü–ª–µ—á–æ–≤–∏–π —Å—É–≥–ª–æ–±" ? (
          <FormFloatingSelect
            items={plechKulshSuglobViews}
            onZoneSelect={setSelectedplechKulshSuglobViews}
            label="–ü—Ä–æ—î–∫—ñ—è"
          />
        ) : null}
      </div>

      <div className="d-flex flex-wrap justify-content-between zonesButtons">
        <div className="allChildrenMarginY">
          <Button
            variant="success"
            className="me-0"
            onClick={() => {
              setDescriptionOnlyButtonDisabled(false);
              handleApplyZone();
            }}
            disabled={addintoEditorButtonDisabled}
          >
            Add into Editor ‚úÖüìÑ
          </Button>{" "}
          <AddZoneButton
            title="New Protocol"
            variant="success"
            onAddOptions={() => {
              // setDescriptionOnlyButtonDisabled(true);
              handleApplyZone();
              dispatch(resetZoneInfoSliseReducer());
            }}
            setDescriptionOnlyButtonTrue={()=>{
              setDescriptionOnlyButtonDisabled(true);
              dispatch(resetZoneInfoSliseReducer());
            }}
            addintoEditorButtonDisabled={addintoEditorButtonDisabled}
          />
          <AddZoneDescriptionOnlyButton
            title="Add Description"
            variant="outline-info"
            descriptionOnlyButtonDisabled={descriptionOnlyButtonDisabled}
            // descriptionOnlyButtonDisabled2={descriptionOnlyButtonDisabled2}
            // onAddOptions={onAddOptions}
          />
        </div>
        <DeleteButton
          title="Remove Protocol"
          variant="outline-danger"
          // onClick={() => onDelete(id)}
          id={id}
        />
      </div>
    </div>
  );
};
